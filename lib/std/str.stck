const Str.len     sizeof(int) offset end
const Str.data    sizeof(ptr) offset end
const sizeof(Str) reset end

proc streq :: int ptr int ptr -> bool do
  let len ptr1 len2 ptr2 do
    if len len2 eq do
      len while
        if dup 0 gteq do
          1 sub
               ptr1 over ptr+ read8
          over ptr2 swap ptr+ read8
          eq
        else false end
      do end
      0 lt
    else
      false
    end
  end
end

proc cstr-to-str :: ptr -> int ptr do
  0 while 2dup ptr+ read8 0 neq do
    1 add
  end swap
end

proc is-digit :: int -> bool do
  dup  '0' gteq
  swap '9' lteq
  land
end

proc parse-uint :: int ptr -> int do
  let len data do
    0 0 // out inc
    while dup len lt do
      data over ptr+ read8
      if dup is-digit do
        '0' sub rot 10 mul add swap
      else drop end

      1 add
    end drop
  end
end

proc parse-int :: int ptr -> int do
  if dup read8 '-' eq do
    1 ptr+ swap 1 sub swap
    parse-uint not 1 add
  else parse-uint end
end