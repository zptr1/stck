const max(i8)  127 end
const max(i16) 32767 end
const max(i32) 2147483647 end
const max(i64) 9223372036854775807 end

const min(i8)  -128 end
const min(i16) -32768 end
const min(i32) -2147483648 end
const min(i64) -9223372036854775808 end

const max(u8)  255 end
const max(u16) 65535 end
const max(u32) 4294967295 end
// TODO: max(u64)

var lcg_seed int end
const LCG_MULTIPLIER 6364136223846793005 end
const LCG_INCREMENT  1442695040888963407 end

/// Returns a random 64-bit integer using LCG
proc rand -> int do
  lcg_seed @int
  LCG_MULTIPLIER mul LCG_INCREMENT add
  dup lcg_seed !int
end

/// Initializes the seed for the random integer generation
inline proc randseed :: int do
  lcg_seed !int
end

/// Generates a random integer within the provided range
inline proc randrange :: int int -> int do
  over sub rand swap mod add
end

/// Returns the absolute value of a 64-bit integer
inline proc abs :: int -> int do
  if dup 0 lt do neg end
end

/// Returns the amount of leading zero bits in the 64-bit integer
unsafe proc clz :: int -> int do
  asm
    pop rax
    bsr rax, rax
    xor rax, 63
    push rax
  end
end

/// Returns a factorial of an integer
proc factorial :: int -> int do
  1 while over 1 gt do
    over mul swap 1 sub swap
  end swap drop
end

/// Negates an integer
inline proc neg :: int -> int do
  not 1 add
end

/// Raises an integer to a given power
proc pow :: int int -> int do
  if dup 2 eq do
    drop dup mul
  else
    let a n do
      a 1 while dup n lt do
        1 add swap a mul swap
      end drop
    end
  end
end

/// Returns an approximate square root of an integer
proc sqrt :: int -> int do
  let n do
    0 1 1
    while dup n lteq do
      over add
      rot 1 add
      rot 2 add
      rot
    end drop drop
  end
end
